- name: Gather host recovery key and luks header backup paths
  ansible.builtin.set_fact:
    luks_host_recovery_key:
      "/etc/.luks-slot{{ luks_slot }}-{{ luks_uuid }}.crypt"
    luks_header_backup_path: "/root/.luks-{{ luks_uuid }}.header"

- name: Gather local recovery key path
  ansible.builtin.set_fact:
    luks_local_recovery_key:
      "files/{{ inventory_hostname }}/{{ luks_host_recovery_key }}"

- name: Confirm presence of {{ luks_local_recovery_key }}
  ansible.builtin.stat:
    path: "{{ luks_local_recovery_key }}"
  delegate_to: localhost
  register: luks_local_recovery_key_stat
  changed_when: false

- name: Confirm presence of {{ luks_host_recovery_key }}
  become: true
  ansible.builtin.stat:
    path: "{{ luks_host_recovery_key }}"
  register: luks_host_recovery_key_stat
  changed_when: false

- name: Verify consistency of recovery keys on local and remote
  ansible.builtin.fail:
    msg: Missing key from local or remote
  when:
    - luks_host_recovery_key_stat.stat.exists and not
      luks_local_recovery_key_stat.stat.exists
    - not luks_host_recovery_key_stat.stat.exists and
      luks_local_recovery_key_stat.stat.exists

- name: Verify recovery key contents on localhost and remote
  ansible.builtin.fail:
    msg: Contents do not match
  when:
    - luks_host_recovery_key_stat.stat.checksum is defined
    - luks_local_recovery_key_stat.stat.checksum is defined
    - luks_host_recovery_key_stat.stat.checksum !=
      luks_local_recovery_key_stat.stat.checksum

- name: Test recovery key
  ansible.builtin.include_tasks: test_recovery_key.yml
  when: luks_local_recovery_key_stat.stat.exists

- name: "Create recovery key for LUKS slot {{ luks_slot }}"
  become: true
  when: not luks_local_recovery_key_stat.stat.exists
  block:
    - name: Create key and save to host
      ansible.builtin.copy:
        dest: "{{ luks_host_recovery_key }}"
        mode: "0600"
        content: >
          {{ lookup('ansible.builtin.password', '/dev/null', length=64,
          chars=['ascii_lowercase']) | batch(8) | map('join') | join('-') }}

    - name: Ensure slot is clear
      ansible.builtin.include_tasks: clear_slot.yml

    - name: Add recovery key to partition {{ luks_uuid }}
      ansible.builtin.command:
        cmd:
          "cryptsetup luksAddKey --new-key-slot={{ luks_slot }} {{ luks_path }}
          {{ luks_host_recovery_key }}"
        stdin: "{{ luks_passphrase }}"
      changed_when: true

    - name: Save recovery key for partition {{ luks_uuid }}
      ansible.builtin.fetch:
        src: "{{ luks_host_recovery_key }}"
        dest: files

- name: Check LUKS header backup saved for partition {{ luks_uuid }}
  ansible.builtin.stat:
    path: "files/{{ inventory_hostname }}/{{ luks_header_backup_path }}"
  delegate_to: localhost
  register: luks_local_luks_header_backup

- name: Backup LUKS header for partition {{ luks_uuid }}
  become: true
  when: not luks_local_luks_header_backup.stat.exists
  block:
    - name: Create LUKS header backup for partition {{ luks_uuid }}
      ansible.builtin.command:
        cryptsetup luksHeaderBackup {{ luks_path }} --header-backup-file {{
        luks_header_backup_path }}
      changed_when: true

    - name: Set ownership for header backup
      ansible.builtin.file:
        path: "{{ luks_header_backup_path }}"
        mode: "0600"

    - name: Download LUKS header for partition {{ luks_uuid }}
      ansible.builtin.fetch:
        src: "{{ luks_header_backup_path }}"
        dest: files
  always:
    - name: Delete backup header from remote
      ansible.builtin.file:
        path: "{{ luks_header_backup_path }}"
        state: absent
